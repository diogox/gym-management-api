// <auto-generated />
using System;
using GymAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GymAPI.Migrations
{
    [DbContext(typeof(GymContext))]
    [Migration("20181124181255_CreateEntities")]
    partial class CreateEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview3-35497");

            modelBuilder.Entity("GymAPI.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName");

                    b.Property<double>("HeightInMeters");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("LastName");

                    b.Property<long>("Nif");

                    b.Property<long?>("TrainingPlanId");

                    b.Property<float>("WeightInKg");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("GymAPI.Models.ClientCheckIn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("At");

                    b.Property<long?>("ClientId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientCheckIn");
                });

            modelBuilder.Entity("GymAPI.Models.ClientNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ClientId");

                    b.Property<bool>("IsUnread");

                    b.Property<string>("Message");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientNotification");
                });

            modelBuilder.Entity("GymAPI.Models.Equipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandName");

                    b.Property<string>("Description");

                    b.Property<long?>("ExerciseId");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<float>("PriceInEuro");

                    b.Property<int>("Quantity");

                    b.Property<string>("SupplierName");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("GymAPI.Models.Exercise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("DifficultyLevel");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<int>("TargetMuscleGroup");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("GymAPI.Models.StaffMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("HasBeenPaidThisMonth");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("LastName");

                    b.Property<long>("Nif");

                    b.Property<int>("Rank");

                    b.Property<float>("Salary");

                    b.HasKey("Id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("GymAPI.Models.SupportTicket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("GymAPI.Models.TrainingPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("SupervisingTrainerId");

                    b.HasKey("Id");

                    b.HasIndex("SupervisingTrainerId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("GymAPI.Models.TrainingPlanBlock", b =>
                {
                    b.Property<long>("PlanId");

                    b.Property<long>("ExerciseId");

                    b.Property<int>("DayOfTheWeek");

                    b.Property<int>("NumberOfRepetitions");

                    b.Property<int>("NumberOfSeries");

                    b.HasKey("PlanId", "ExerciseId", "DayOfTheWeek", "NumberOfRepetitions", "NumberOfSeries");

                    b.HasIndex("ExerciseId");

                    b.ToTable("TrainingPlanBlock");
                });

            modelBuilder.Entity("GymAPI.Models.Client", b =>
                {
                    b.HasOne("GymAPI.Models.TrainingPlan", "TrainingPlan")
                        .WithMany()
                        .HasForeignKey("TrainingPlanId");
                });

            modelBuilder.Entity("GymAPI.Models.ClientCheckIn", b =>
                {
                    b.HasOne("GymAPI.Models.Client")
                        .WithMany("CheckInHistory")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("GymAPI.Models.ClientNotification", b =>
                {
                    b.HasOne("GymAPI.Models.Client")
                        .WithMany("Notifications")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("GymAPI.Models.Equipment", b =>
                {
                    b.HasOne("GymAPI.Models.Exercise")
                        .WithMany("EquipmentToUse")
                        .HasForeignKey("ExerciseId");
                });

            modelBuilder.Entity("GymAPI.Models.SupportTicket", b =>
                {
                    b.HasOne("GymAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymAPI.Models.TrainingPlan", b =>
                {
                    b.HasOne("GymAPI.Models.StaffMember", "SupervisingTrainer")
                        .WithMany()
                        .HasForeignKey("SupervisingTrainerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymAPI.Models.TrainingPlanBlock", b =>
                {
                    b.HasOne("GymAPI.Models.Exercise", "Exercise")
                        .WithMany("UsedByPlans")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymAPI.Models.TrainingPlan", "Plan")
                        .WithMany("ExerciseBlocks")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
